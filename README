Land Registry Smart Contract

Overview

This Solidity-based smart contract, `LandRegistry`, allows users to register land parcels on the Ethereum blockchain and manage ownership transfers securely. The contract is designed to provide transparency and immutability in land registration and ownership records.

Key Features:
- Land Registration: Users can register new land parcels by providing details such as location and area.
- Ownership Transfer: Registered land owners can transfer ownership of their land to another address.
- Land Details Retrieval: Users can query the details of any registered land parcel.
- Event Logging: The contract emits events for both land registration and ownership transfer, enabling easy tracking of changes.

Table of Contents

1. [Prerequisites](#prerequisites)
2. [Installation](#installation)
3. [Usage](#usage)
4. [Contract Details](#contract-details)
5. [Functions](#functions)
6. [Events](#events)
7. [License](#license)

Prerequisites

To interact with this smart contract, you need the following:

- Node.js (v14 or higher)
- Truffle or Hardhat for deployment
- MetaMask or another Ethereum wallet for testing
- Solidity Compiler (`solc`) version `^0.8.0`

Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/land-registry.git
   cd land-registry
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Compile the smart contract:
   ```bash
   truffle compile
   ```
   or
   ```bash
   npx hardhat compile
   ```

4. Deploy the contract to a local test network:
   ```bash
   truffle migrate --network development
   ```
   or
   ```bash
   npx hardhat run scripts/deploy.js --network localhost
   ```

Usage

Registering a Land Parcel

To register a new land parcel, call the `registerLand` function with the following parameters:

- `_id`: A unique identifier for the land parcel.
- `_location`: A string describing the location of the land.
- `_area`: The area of the land in square meters.

Example:
```solidity
contract.registerLand(1, "New York", 500);
```

Transferring Ownership

To transfer ownership of a registered land parcel, call the `transferOwnership` function with the following parameters:

- `_id`: The ID of the land parcel.
- `_newOwner`: The Ethereum address of the new owner.

Example:
```solidity
contract.transferOwnership(1, "0xNewOwnerAddress");
```

Retrieving Land Details

To retrieve the details of a registered land parcel, call the `getLand` function with the land ID.

Example:
```solidity
(uint256 id, string memory location, uint256 area, address owner, bool registered) = contract.getLand(1);
```

Checking Registration Status

To check if a land parcel is registered, call the `isLandRegistered` function with the land ID.

Example:
```solidity
bool isRegistered = contract.isLandRegistered(1);
```

Contract Details

Data Structure

The contract uses a `struct` named `Land` to represent each land parcel. Each `Land` contains the following fields:

- `id`: A unique identifier for the land parcel.
- `location`: A string describing the location of the land.
- `area`: The area of the land in square meters.
- `owner`: The Ethereum address of the current owner.
- `registered`: A boolean indicating whether the land is registered.

Storage

The contract uses a `mapping` to store land details, where the key is the land ID (`uint256`) and the value is the `Land` struct.

Functions

`registerLand(uint256 _id, string memory _location, uint256 _area)`
Registers a new land parcel. Emits a `LandRegistered` event upon successful registration.

- Parameters:
  - `_id`: Unique identifier for the land parcel.
  - `_location`: Location of the land.
  - `_area`: Area of the land in square meters.

`transferOwnership(uint256 _id, address _newOwner)`
Transfers ownership of a registered land parcel to a new owner. Emits an `OwnershipTransferred` event upon successful transfer.

- Parameters:
  - `_id`: ID of the land parcel.
  - `_newOwner`: Address of the new owner.

`getLand(uint256 _id)`
Retrieves the details of a registered land parcel.

- Returns:
  - `(uint256, string, uint256, address, bool)`: Land ID, location, area, owner address, and registration status.

`isLandRegistered(uint256 _id)`
Checks if a land parcel is registered.

- Returns:
  - `bool`: `true` if the land is registered, `false` otherwise.

Events

`LandRegistered(uint256 indexed landId, string location, uint256 area, address indexed owner)`
Emitted when a new land parcel is registered.

`OwnershipTransferred(uint256 indexed landId, address indexed oldOwner, address indexed newOwner)`
Emitted when ownership of a land parcel is transferred.

License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.
